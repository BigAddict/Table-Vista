## Member Management Database Schema
# models.py in the member_management app

from django.db import models

class Member(models.Model):
    member_id = models.CharField(max_length=10, unique=True)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    date_of_birth = models.DateField(null=True, blank=True)
    gender = models.CharField(max_length=10)
    phone_number = models.CharField(max_length=15)
    email = models.EmailField(null=True, blank=True)
    address = models.TextField()
    registration_date = models.DateField(auto_now_add=True)

class Group(models.Model):
    group_id = models.CharField(max_length=10, unique=True)
    group_name = models.CharField(max_length=50)
    group_description = models.TextField()
    group_leader = models.ForeignKey(Member, on_delete=models.SET_NULL, null=True, blank=True)
    meeting_schedule = models.CharField(max_length=100)

class GroupMember(models.Model):
    member = models.ForeignKey(Member, on_delete=models.CASCADE)
    group = models.ForeignKey(Group, on_delete=models.CASCADE)
    join_date = models.DateField(auto_now_add=True)
    contribution_amount = models.DecimalField(max_digits=10, decimal_places=2)

class Document(models.Model):
    member = models.ForeignKey(Member, on_delete=models.CASCADE)
    document_type = models.CharField(max_length=50)
    document_description = models.TextField()
    document_file = models.FileField(upload_to='documents/')
    upload_date = models.DateTimeField(auto_now_add=True)

## Savings Accound database schema
# models.py in the savings_account app

from django.db import models

class SavingsAccount(models.Model):
    account_number = models.CharField(max_length=10, unique=True)
    member = models.ForeignKey(Member, on_delete=models.CASCADE)
    account_balance = models.DecimalField(max_digits=10, decimal_places=2)
    opening_date = models.DateField(auto_now_add=True)
    status = models.CharField(max_length=20)
    interest_rate = models.ForeignKey(InterestRate, on_delete=models.SET_NULL, null=True, blank=True)

class Transaction(models.Model):
    account = models.ForeignKey(SavingsAccount, on_delete=models.CASCADE)
    transaction_type = models.CharField(max_length=20)
    transaction_amount = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_date = models.DateTimeField(auto_now_add=True)
    description = models.TextField()

class InterestRate(models.Model):
    name = models.CharField(max_length=50)
    rate = models.DecimalField(max_digits=5, decimal_places=2)
    start_date = models.DateField()
    end_date = models.DateField()
    description = models.TextField()

## Loan management database schema
# models.py in the loan_management app

from django.db import models

class LoanProduct(models.Model):
    product_name = models.CharField(max_length=50, unique=True)
    interest_rate = models.DecimalField(max_digits=5, decimal_places=2)
    max_loan_amount = models.DecimalField(max_digits=10, decimal_places=2)
    min_loan_amount = models.DecimalField(max_digits=10, decimal_places=2)
    max_loan_term = models.PositiveIntegerField()
    min_loan_term = models.PositiveIntegerField()
    description = models.TextField()

class LoanApplication(models.Model):
    applicant = models.ForeignKey(Member, on_delete=models.CASCADE)
    product = models.ForeignKey(LoanProduct, on_delete=models.CASCADE)
    application_date = models.DateField(auto_now_add=True)
    loan_amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20)
    approval_date = models.DateField(null=True, blank=True)
    disbursement_date = models.DateField(null=True, blank=True)
    repayment_start_date = models.DateField(null=True, blank=True)

class Repayment(models.Model):
    loan = models.ForeignKey(LoanApplication, on_delete=models.CASCADE)
    installment_number = models.PositiveIntegerField()
    due_date = models.DateField()
    installment_amount = models.DecimalField(max_digits=10, decimal_places=2)
    paid_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    status = models.CharField(max_length=20)
    payment_date = models.DateField(null=True, blank=True)
    late_fee = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)

class Collateral(models.Model):
    loan = models.ForeignKey(LoanApplication, on_delete=models.CASCADE)
    collateral_type = models.CharField(max_length=50)
    collateral_value = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()

## Transaction history database schema
# models.py in the transaction_history app

from django.db import models

class TransactionHistory(models.Model):
    TRANSACTION_TYPES = [
        ('DEPOSIT', 'Deposit'),
        ('WITHDRAWAL', 'Withdrawal'),
        ('LOAN_REPAYMENT', 'Loan Repayment'),
        ('INTEREST_PAYMENT', 'Interest Payment'),
        # Add more transaction types as needed
    ]

    transaction_type = models.CharField(max_length=20, choices=TRANSACTION_TYPES)
    transaction_amount = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_date = models.DateTimeField(auto_now_add=True)
    description = models.TextField()
    account = models.ForeignKey(SavingsAccount, on_delete=models.CASCADE, null=True, blank=True)
    loan = models.ForeignKey(LoanApplication, on_delete=models.CASCADE, null=True, blank=True)

## reporting and analysis database schema
# models.py in the reports_and_analytics app

from django.db import models
from django.contrib.auth.models import User

class Report(models.Model):
    REPORT_TYPES = [
        ('financial', 'Financial Report'),
        ('operational', 'Operational Report'),
        ('custom', 'Custom Report'),
    ]

    report_name = models.CharField(max_length=100)
    report_type = models.CharField(max_length=20, choices=REPORT_TYPES)
    description = models.TextField()
    created_by = models.ForeignKey(User, on_delete=models.CASCADE)
    creation_date = models.DateTimeField(auto_now_add=True)
    last_updated = models.DateTimeField(auto_now=True)
    is_public = models.BooleanField(default=False)

class ReportParameter(models.Model):
    report = models.ForeignKey(Report, on_delete=models.CASCADE)
    parameter_name = models.CharField(max_length=50)
    parameter_type = models.CharField(max_length=20)
    description = models.TextField()
    is_required = models.BooleanField()
    default_value = models.CharField(max_length=100, blank=True)
    options = models.JSONField(blank=True, null=True)

class ReportData(models.Model):
    report = models.ForeignKey(Report, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    parameters = models.JSONField()
    data = models.JSONField()
    generation_date = models.DateTimeField(auto_now_add=True)
    expiration_date = models.DateTimeField(null=True, blank=True)

class AnalyticsMetric(models.Model):
    metric_name = models.CharField(max_length=100)
    description = models.TextField()
    calculation_formula = models.TextField()
    data_source = models.CharField(max_length=100)

class AnalyticsData(models.Model):
    metric = models.ForeignKey(AnalyticsMetric, on_delete=models.CASCADE)
    date = models.DateField()
    value = models.DecimalField(max_digits=10, decimal_places=2)
    additional_data = models.JSONField(blank=True, null=True)

## investment management database schema
# models.py in the investment_management app

from django.db import models

class InvestmentProduct(models.Model):
    product_name = models.CharField(max_length=100, unique=True)
    description = models.TextField()
    start_date = models.DateField()
    end_date = models.DateField()
    interest_rate = models.DecimalField(max_digits=5, decimal_places=2)
    minimum_investment = models.DecimalField(max_digits=10, decimal_places=2)
    maximum_investment = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20)

class Investment(models.Model):
    product = models.ForeignKey(InvestmentProduct, on_delete=models.CASCADE)
    investor = models.ForeignKey(Member, on_delete=models.CASCADE)
    investment_amount = models.DecimalField(max_digits=10, decimal_places=2)
    investment_date = models.DateField()
    status = models.CharField(max_length=20)
    maturity_date = models.DateField()
    earnings = models.DecimalField(max_digits=10, decimal_places=2)

class InvestmentTransaction(models.Model):
    TRANSACTION_TYPES = [
        ('deposit', 'Deposit'),
        ('withdrawal', 'Withdrawal'),
    ]

    investment = models.ForeignKey(Investment, on_delete=models.CASCADE)
    transaction_type = models.CharField(max_length=20, choices=TRANSACTION_TYPES)
    transaction_amount = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_date = models.DateTimeField(auto_now_add=True)
    description = models.TextField()
